{"version":3,"sources":["assets/img/logo-skinner-fondo.png","components/Header/index.js","components/ThemePicker/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","src","logo","alt","href","target","rel","class","data-name","xmlns","viewBox","preserveAspectRatio","d","ThemePicker","type","App","useEffect","document","documentElement","style","setProperty","window","innerHeight","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sHAAAA,EAAOC,QAAU,IAA0B,gD,wNCI5B,SAASC,IACtB,OACE,4BAAQC,UAAU,cAChB,yBAAKA,UAAU,aACb,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzC,uBACEH,UAAU,WACVI,KAAK,gCACLC,OAAO,SACPC,IAAI,uBAJN,WASF,yBAAKC,MAAM,uCACT,yBACEC,YAAU,UACVC,MAAM,6BACNC,QAAQ,eACRC,oBAAoB,QAEpB,0BAAMC,EAAE,oCAAoCL,MAAM,iBAGtD,yBAAKP,UAAU,eACb,uBAAGO,MAAM,WACP,2MAKF,uBAAGA,MAAM,oBACP,6M,MCjCK,SAASM,IACrB,OACG,yBAAKb,UAAU,eACX,2BAAOc,KAAK,cCePC,MAff,WAOE,OANAC,qBAAU,WACRC,SAASC,gBAAgBC,MAAMC,YAC7B,OADF,UAEKC,OAAOC,YAAc,IAF1B,SAIC,IAED,yBAAKtB,UAAU,OACb,kBAACD,EAAD,MACA,kBAACc,EAAD,QCJcU,QACW,cAA7BF,OAAOG,SAASC,UAEe,UAA7BJ,OAAOG,SAASC,UAEhBJ,OAAOG,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFZ,SAASa,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.9b59f3cb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo-skinner-fondo.35ac6228.png\";","import React from \"react\";\r\nimport logo from \"../../assets/img/logo-skinner-fondo.png\";\r\nimport \"./styles.css\";\r\n\r\nexport default function Header() {\r\n  return (\r\n    <header className=\"App-header\">\r\n      <div className=\"Container\">\r\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n        <a\r\n          className=\"App-link\"\r\n          href=\"https://github.com/tonyjimena\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          Github\r\n        </a>\r\n      </div>\r\n      <div class=\"custom-shape-divider-top-1600866841\">\r\n        <svg\r\n          data-name=\"Layer 1\"\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          viewBox=\"0 0 1200 120\"\r\n          preserveAspectRatio=\"none\"\r\n        >\r\n          <path d=\"M1200 0L0 0 598.97 114.72 1200 0z\" class=\"shape-fill\"></path>\r\n        </svg>\r\n      </div>\r\n      <div className=\"text-slider\">\r\n        <p class=\"marquee\">\r\n          <span>\r\n            Coming soon! - Coming soon! - Coming soon! - Coming soon! - Coming soon! - Coming soon! - Coming soon! - Coming soon! - Coming soon! - Coming soon! -\r\n            Coming soon! -&nbsp;\r\n          </span>\r\n        </p>\r\n        <p class=\"marquee marquee2\">\r\n          <span>\r\n            Coming soon! - Coming soon! - Coming soon! - Coming soon! - Coming soon! - Coming soon! - Coming soon! - Coming soon! - Coming soon! - Coming soon! -\r\n            Coming soon! -&nbsp;\r\n          </span>\r\n        </p>\r\n      </div>\r\n    </header>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport './styles.css';\r\n\r\nexport default function ThemePicker() {\r\n   return (\r\n      <div className='ThemePicker'>\r\n          <input type='checkbox' />\r\n      </div>\r\n   )\r\n}","import React, { useEffect } from \"react\";\r\nimport \"./App.css\";\r\n\r\nimport Header from \"./components/Header/\";\r\nimport ThemePicker from \"./components/ThemePicker/\";\r\n\r\nfunction App() {\r\n  useEffect(() => {\r\n    document.documentElement.style.setProperty(\r\n      \"--vh\",\r\n      `${window.innerHeight / 100}px`\r\n    );\r\n  }, []);\r\n  return (\r\n    <div className=\"App\">\r\n      <Header />\r\n      <ThemePicker />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}